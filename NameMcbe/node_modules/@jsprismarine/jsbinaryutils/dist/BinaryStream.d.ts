/// <reference types="node" />
export default class BinaryStream {
    private buffer;
    private offset;
    constructor(buffer?: Buffer, offset?: number);
    /**
     * Appends a buffer to the binary one.
     *
     * @param buffer
     */
    append(buffer: Buffer): void;
    /**
     * Reads a slice of buffer by the given length.
     *
     * @param length
     */
    read(length: number): Buffer;
    /**
     * Reads an unsigned byte (0 - 255).
     */
    readByte(): number;
    /**
     * Reads a signed byte (-128 - 127).
     */
    readSignedByte(): number;
    /**
     * Writes an unsigned / signed byte.
     *
     * @param v
     */
    writeByte(v: number): void;
    /**
     * Reads a boolean byte.
     */
    readBool(): boolean;
    /**
     * Writes a boolean byte.
     *
     * @param v
     */
    writeBool(v: number): void;
    /**
     * Reads a 16 bit unsigned big-endian number.
     */
    readShort(): number;
    /**
     * Reads a 16 bit signed big-endian number.
     */
    readSignedShort(): number;
    /**
     * Writes a 16 bit signed/unsigned big-endian number.
     *
     * @param v
     */
    writeShort(v: number): void;
    /**
     * Reads a 16 bit unsigned little-endian number.
     */
    readLShort(): number;
    /**
     * Reads a 16 bit signed little-endian number.
     */
    readSignedLShort(): number;
    /**
     * Writes a 16 bit signed/unsigned little-endian number.
     *
     * @param v
     */
    writeLShort(v: number): void;
    /**
     * Reads a 3 bytes unsigned big-endian number.
     */
    readTriad(): number;
    /**
     * Writes a 3 bytes big-endian number.
     *
     * @param v
     */
    writeTriad(v: number): void;
    /**
     * Reads a 3 bytes little-endian number.
     */
    readLTriad(): number;
    /**
     * Writes a 3 bytes little-endian number.
     *
     * @param v
     */
    writeLTriad(v: number): void;
    /**
     * Reads a 4 bytes signed little-endian number.
     */
    readInt(): number;
    /**
     * Writes a 4 bytes number.
     *
     * @param v
     */
    writeInt(v: number): void;
    /**
     * Reads a 4 bytes signed little-endian number.
     */
    readLInt(): number;
    /**
     * Writes a 4 bytes signed little-endian number.
     *
     * @param v
     */
    writeLInt(v: number): void;
    /**
     * Reads a 4 bytes floating-point number.
     */
    readFloat(): number;
    /**
     * Writes a 4 bytes floating-point number.
     *
     * @param v
     */
    writeFloat(v: number): void;
    /**
     * Reads a 4 bytes little-endian floating-point number.
     */
    readLFloat(): number;
    /**
     * Writes a 4 bytes little-endian floating-point number.
     *
     * @param v
     */
    writeLFloat(v: number): void;
    /**
     * Reads a 8 bytes floating-point number.
     */
    readDouble(): number;
    /**
     * Writes a 8 bytes floating-point number.
     *
     * @param v
     */
    writeDouble(v: number): void;
    /**
     * Reads a 8 bytes little-endian floating-point number.
     */
    readLDouble(): number;
    /**
     * Reads a 8 bytes little-endian floating-point number.
     *
     * @param v
     */
    writeLDouble(v: number): void;
    /**
     * Reads a 8 byte number.
     */
    readLong(): bigint;
    /**
     * Writes a 8 bytes number.
     *
     * @param v
     */
    writeLong(v: bigint): void;
    /**
     * Reads a 8 bytes little-endian number.
     */
    readLLong(): bigint;
    /**
     * Writes a 8 bytes little-endian number.
     *
     * @param v
     */
    writeLLong(v: bigint): void;
    /**
     * Reads a 32 bit zigzag-encoded number.
     */
    readVarInt(): number;
    /**
     * Reads a 32 bit unsigned number.
     */
    readUnsignedVarInt(): number;
    /**
     * Writes a 32 bit zigzag-encoded number.
     *
     * @param v
     */
    writeVarInt(v: number): void;
    /**
     * Writes a 32 bit unsigned number with variable-length.
     *
     * @param v
     */
    writeUnsignedVarInt(v: number): void;
    /**
     * Reads a 64 bit zigzag-encoded variable-length number.
     */
    readVarLong(): bigint;
    /**
     * Reads a 64 bit unsigned variable-length number.
     */
    readUnsignedVarLong(): bigint;
    /**
     * Writes a 64 bit unsigned zigzag-encoded number.
     *
     * @param v
     */
    writeVarLong(v: bigint): void;
    /**
     * Writes a 64 bit unsigned variable-length number.
     *
     * @param v
     */
    writeUnsignedVarLong(v: bigint): void;
    /**
     * Increases the offset by the given length,
     * retval is used to skip bytes directly.
     *
     * @param length
     * @param retval
     */
    addOffset(length: number, retval?: boolean): number;
    /**
     * Returns whatever or not the offset is at end of line.
     */
    feof(): boolean;
    /**
     * Reads the remaining bytes and returns the buffer slice.
     */
    readRemaining(): Buffer;
    /**
     * Resets the buffer.
     */
    reset(): void;
    getBuffer(): Buffer;
    getOffset(): number;
}
