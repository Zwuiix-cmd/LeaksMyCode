/// <reference types="node" />
import Dgram from 'dgram';
import EventEmitter from 'events';
import { Connection } from "./Connection";
import InetAddress from './utils/InetAddress';
declare const enum State {
    Waiting = 0,
    Connecting = 1,
    Connected = 2
}
export declare class Client extends EventEmitter {
    client: boolean;
    server: boolean;
    id: bigint;
    socket: Dgram.Socket;
    connection: Connection;
    mtuSize: number;
    state: State;
    hostname: string;
    port: number;
    address: InetAddress;
    running: boolean;
    lastPong: bigint;
    inLog: any;
    outLog: any;
    int: any;
    constructor(hostname: string, port: number);
    connect(): Promise<void>;
    handle(buffer: any, rinfo: any): void;
    sendConnectionRequest(): void;
    handleUnconnectedPong(buffer: any): void;
    sendUnconnectedPing(): void;
    ping(cb: any): void;
    handleOpenConnectionReply1(buffer: any): Promise<Buffer>;
    handleOpenConnectionReply2(buffer: any): Promise<void>;
    startTicking(): void;
    close(reason: any): void;
    removeConnection(args: any): void;
    /**
       * Send packet buffer to the server
       *
       * @param {Buffer} buffer
       * @param {string} address
       * @param {number} port
       */
    sendBuffer(buffer: any, to?: InetAddress): void;
}
export {};
